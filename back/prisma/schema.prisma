// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EducationLevel {
  id        String   @id @default(uuid())
  nameAr    String
  nameEn    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model JobTitleByFunctioanArea {
  functionalArea   FunctionalArea @relation(fields: [functionalAreaId], references: [id])
  functionalAreaId String
  jobtitle         JobTitle       @relation(fields: [jobTitleId], references: [id])
  jobTitleId       String

  @@unique(fields: [functionalAreaId, jobTitleId], name: "jobTitleByFunctioanArea")
}

model FunctionalArea {
  id                      String                    @id @default(uuid())
  nameAr                  String
  nameEn                  String
  JobTitleByFunctioanArea JobTitleByFunctioanArea[]
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  User                    User[]
}

model JobTitle {
  id                      String                    @id @default(uuid())
  nameAr                  String
  nameEn                  String
  JobTitleByFunctioanArea JobTitleByFunctioanArea[]
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  User                    User[]
}

model User {
  id                   String          @id @default(uuid())
  fullNameEn           String
  fullNameAr           String
  email                String          @unique
  address              String
  tel                  String
  password             String
  avatar               Media?          @relation(fields: [avatarId], references: [id])
  avatarId             String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  accountBalance       Float?
  category             UserCategory?   @relation(fields: [categoryId], references: [id])
  categoryId           String?
  educationLevel       EducationLevel? @relation(fields: [educationLevelId], references: [id])
  educationLevelId     String?
  functionalArea       FunctionalArea? @relation(fields: [functionalAreaId], references: [id])
  functionalAreaId     String?
  jobTitle             JobTitle?       @relation(fields: [jobTitleId], references: [id])
  jobTitleId           String?
  Media                MediaUser[]
  Rating               Rating[]
  IntermediateCommands Command[]       @relation("intermediate")
  clientCommands       Command[]       @relation("clientCommand")
}

model UserCategory {
  id        String   @id @default(uuid())
  nameAr    String
  nameEn    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model Type {
  id        String    @id @default(uuid())
  nameAr    String
  nameEn    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]
}

model ArticleCategory {
  id        String    @id @default(uuid())
  nameAr    String
  nameEn    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]
}

model PublishingHouse {
  id        String    @id @default(uuid())
  name      String
  address   String
  logo      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]
}

model Article {
  id                 String             @id @default(uuid())
  title              String
  cover              Media?             @relation(fields: [coverId], references: [id])
  coverId            String?
  weight             Float
  pageNumber         Int
  code               String             @unique
  shortDescriptionEn String?            @map("short_desc_en")
  longDescriptionEn  String?            @map("long_desc_en")
  shortDescriptionAr String?            @map("short_desc_ar")
  longDescriptionAr  String?            @map("long_desc_ar")
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  category           ArticleCategory    @relation(fields: [categoryId], references: [id])
  categoryId         String
  publishingHouse    PublishingHouse    @relation(fields: [publishingHouseId], references: [id])
  publishingHouseId  String
  type               Type               @relation(fields: [typeId], references: [id])
  typeId             String
  ArticlesByBranch   ArticlesByBranch[]
  Supply             Supply[]
  media              MediaArticle[]
  ArticleByAuthor    ArticleByAuthor[]
}

model Author {
  id              String            @id @default(uuid())
  nameAr          String
  nameEn          String
  biographyAr     String?
  biographyEn     String?
  ArticleByAuthor ArticleByAuthor[]
}

model ArticleByAuthor {
  article   Article @relation(fields: [articleId], references: [id])
  articleId String
  author    Author  @relation(fields: [authorId], references: [id])
  authorId  String

  @@unique([authorId, articleId])
}

model ArticlesByBranch {
  id          String        @id @default(uuid())
  branch      Branch        @relation(fields: [branchId], references: [id])
  branchId    String
  articleId   String
  article     Article       @relation(fields: [articleId], references: [id])
  price       Float
  stock       Int
  Rating      Rating[]
  CommandLine CommandLine[]

  @@unique([branchId, articleId])
}

model Rating {
  articleByBranch   ArticlesByBranch @relation(fields: [articleByBranchId], references: [id])
  articleByBranchId String
  user              User             @relation(fields: [userId], references: [id])
  userId            String
  rate              Int
  commit            String

  @@unique(fields: [articleByBranchId, userId], name: "articleUser")
}

model CommandLine {
  command           Command          @relation(fields: [commandId], references: [id])
  commandId         String
  articleByBranch   ArticlesByBranch @relation(fields: [articleByBranchId], references: [id])
  articleByBranchId String
  quantity          Int

  @@unique(fields: [commandId, articleByBranchId], name: "commandArticle")
}

model Branch {
  id               String             @id @default(uuid())
  name             String
  identifier       String             @unique
  address          String
  mainBranch       Boolean            @default(false)
  articlesByBranch ArticlesByBranch[]
  commands         Command[]
}

model Command {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  client         User?         @relation(name: "clientCommand", fields: [clientId], references: [id])
  clientId       String?       @map("client_id")
  clientName     String        @map("client_name")
  clientAddress  String        @map("client_address")
  clientTel      String        @map("client_tel")
  delivered      Boolean       @default(false)
  paid           Boolean       @default(false)
  hasDelivery    Boolean       @default(false) @map("has_delivery")
  branch         Branch        @relation(fields: [branchId], references: [id])
  branchId       String        @map("branch_id")
  intermediate   User?         @relation(name: "intermediate", fields: [intermediateId], references: [id])
  intermediateId String?       @map("intermediate_id")
  commandLine    CommandLine[]
}

model Supply {
  providerId String
  provider   Provider @relation(fields: [providerId], references: [id])
  articleId  String
  article    Article  @relation(fields: [articleId], references: [id])
  dateTime   DateTime

  @@unique(fields: [articleId, providerId, dateTime], name: "supplyByTime")
}

model Provider {
  id             String   @id @default(uuid())
  name           String
  address        String
  tel            String
  accountBalance Float
  logo           String
  email          String   @unique
  Supply         Supply[]
}

//media
model Media {
  id           String         @id @default(uuid())
  path         String
  type         String
  alt          String
  extension    String
  description  String
  MediaUser    MediaUser[]
  MediaArticle MediaArticle[]
  User         User[]
  Article      Article[]
}

model MediaUser {
  media   Media  @relation(fields: [mediaId], references: [id])
  mediaId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@unique(fields: [mediaId, userId], name: "userMedia")
}

model MediaArticle {
  media     Media   @relation(fields: [mediaId], references: [id])
  mediaId   String
  article   Article @relation(fields: [articleId], references: [id])
  articleId String

  @@unique(fields: [mediaId, articleId], name: "articleMedia")
}
