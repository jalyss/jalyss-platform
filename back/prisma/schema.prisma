// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EducationLevel {
  id        String   @id @default(uuid())
  nameAr    String
  nameEn    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model JobTitleByFunctioanArea {
  functionalArea   FunctionalArea @relation(fields: [functionalAreaId], references: [id])
  functionalAreaId String
  jobtitle         JobTitle       @relation(fields: [jobTitleId], references: [id])
  jobTitleId       String

  @@unique(fields: [functionalAreaId, jobTitleId], name: "jobTitleByFunctioanArea")
}

model FunctionalArea {
  id                      String                    @id @default(uuid())
  nameAr                  String
  nameEn                  String
  JobTitleByFunctioanArea JobTitleByFunctioanArea[]
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  User                    User[]
}

model JobTitle {
  id                      String                    @id @default(uuid())
  nameAr                  String
  nameEn                  String
  JobTitleByFunctioanArea JobTitleByFunctioanArea[]
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  User                    User[]
}

model User {
  id                   String            @id @default(uuid())
  fullNameEn           String
  fullNameAr           String
  email                String            @unique
  address              String
  tel                  String
  password             String
  avatar               Media?            @relation(fields: [avatarId], references: [id])
  avatarId             String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  accountBalance       Float?
  category             UserCategory?     @relation(fields: [categoryId], references: [id])
  categoryId           String?
  educationLevel       EducationLevel?   @relation(fields: [educationLevelId], references: [id])
  educationLevelId     String?
  functionalArea       FunctionalArea?   @relation(fields: [functionalAreaId], references: [id])
  functionalAreaId     String?
  jobTitle             JobTitle?         @relation(fields: [jobTitleId], references: [id])
  jobTitleId           String?
  country              Country?          @relation(fields: [countryId], references: [id])
  countryId            String?
  city                 City?             @relation(fields: [cityId], references: [id])
  cityId               String?
  confirmkey           String?
  isActive             Boolean                @default(true)
  Media                MediaUser[]
  Rating               Rating[]
  IntermediateCommands Command[]         @relation("intermediate")
  clientCommands       Command[]         @relation("clientCommand")
  Blog                 Blog[]
  BlogLike             BlogLike[]
  chatRooms            UserChatRoom[] // *many to many relationships user&chatRoom
  ChatMessage          ChatMessage[]
  bookings             Booking[] // One-to-Many relation to Booking
  coaching             Coaching[]
  sessionRequests      SessionRequest[]
  trainingBooks        TrainingBooking[] // *One-to-Many relation to TrainingBooking
  userpayments         UserPayment[] // *One-to-Many relation to UserPayment
  commentBlog          CommentBlog[]
  replyCommentaireBlog ReplyCommentBlog[]
  bookMark  Bookmark[]
}

model UserPayment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  amount     Float
  createdAt DateTime @default(now())
}

model Coaching {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  lecture   Lecture @relation(fields: [lectureId], references: [id])
  lectureId String
}

model SessionRequest {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  content   String
  createdAt DateTime @default(now())
}

model TrainingBooking {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  sessiontarif   SessionTarif @relation(fields: [sessionTarifId], references: [id])
  sessionTarifId String
}

model SessionTarif {
  id        String            @id @default(uuid())
  title     String
  price     Float
  bookings  TrainingBooking[] // *one to many relation to TrainingBooking
  session   Session           @relation(fields: [sessionId], references: [id])
  sessionId String
}

model Session {
  id          String                  @id @default(uuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  tarifs      SessionTarif[] // * one to many relation to Session Tarif
  sessionType SessionHasSessionType[] // *many to many relation sessionType
  lectures    SessionHasLecture[] // *many to many relation lecture 
}

//!join table between Session and SessionType

model SessionHasSessionType {
  session       Session     @relation(fields: [sessionId], references: [id])
  sessionId     String
  sessiontype   SessionType @relation(fields: [sessionTypeId], references: [id])
  sessionTypeId String

  @@unique(fields: [sessionId, sessionTypeId], name: "joiner")
}

//!join table between Session and Lecture

model SessionHasLecture {
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String
  lectures  Lecture @relation(fields: [lectureId], references: [id])
  lectureId String

  @@unique(fields: [sessionId, lectureId], name: "joiner_Session_Lecture")
}

model SessionType {
  id       String                  @id @default(uuid())
  title    String
  sessions SessionHasSessionType[] //*many to many relation to Session
}

model Lecture {
  id         String              @id @default(uuid())
  title      String
  content    String
  category   ArticleCategory[]
  sessions   SessionHasLecture[]
  assesments Assessments[]
  coaching   Coaching[]
}
model ArticleCategory {
  id        String    @id @default(uuid())
  nameAr    String
  nameEn    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]
  lecture   Lecture? @relation(fields: [lectureId], references: [id])
  lectureId String?
  Blog   Blog[]
}

model Assessments {
  id        String  @id @default(uuid())
  title     String
  content   String
  lecture   Lecture @relation(fields: [lectureId], references: [id])
  lectureId String
}

model ChatRoom {
  id           String         @id @default(uuid())
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  messages     ChatMessage[]
  participants UserChatRoom[]
}

model ChatMessage {
  id         String   @id @default(uuid())
  text       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId String
}

//join table between user and chat room 

model UserChatRoom {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId String

  @@unique(fields: [userId, chatRoomId], name: "joinerRoom")
}

model UserCategory {
  id        String   @id @default(uuid())
  nameAr    String
  nameEn    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model Type {
  id        String    @id @default(uuid())
  nameAr    String
  nameEn    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]
}

model PublishingHouse {
  id        String    @id @default(uuid())
  name      String
  address   String
  logo      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]
}

model Article {
  id                 String             @id @default(uuid())
  title              String
  cover              Media?             @relation(fields: [coverId], references: [id])
  coverId            String?
  weight             Float
  pageNumber         Int
  code               String             @unique
  shortDescriptionEn String?            @map("short_desc_en")
  longDescriptionEn  String?            @map("long_desc_en")
  shortDescriptionAr String?            @map("short_desc_ar")
  longDescriptionAr  String?            @map("long_desc_ar")
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  category           ArticleCategory    @relation(fields: [categoryId], references: [id])
  categoryId         String
  publishingHouse    PublishingHouse    @relation(fields: [publishingHouseId], references: [id])
  publishingHouseId  String
  type               Type               @relation(fields: [typeId], references: [id])
  typeId             String
  ArticlesByBranch   ArticlesByBranch[]
  Supply             Supply[]
  media              MediaArticle[]
  ArticleByAuthor    ArticleByAuthor[]
}

model Author {
  id              String            @id @default(uuid())
  nameAr          String
  nameEn          String
  biographyAr     String?
  biographyEn     String?
  ArticleByAuthor ArticleByAuthor[]
}

model ArticleByAuthor {
  article   Article @relation(fields: [articleId], references: [id])
  articleId String
  author    Author  @relation(fields: [authorId], references: [id])
  authorId  String

  @@unique([authorId, articleId])
}

model ArticlesByBranch {
  id          String        @id @default(uuid())
  branch      Branch        @relation(fields: [branchId], references: [id])
  branchId    String
  articleId   String
  article     Article       @relation(fields: [articleId], references: [id])
  price       Float
  stock       Int
  rating      Rating[]
  CommandLine CommandLine[]

  @@unique([branchId, articleId])
}

model Rating {
  articleByBranch   ArticlesByBranch @relation(fields: [articleByBranchId], references: [id])
  articleByBranchId String
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  rate              Int
  commit            String

  @@unique(fields: [articleByBranchId, userId], name: "articleUser")
}

model CommandLine {
  command           Command          @relation(fields: [commandId], references: [id])
  commandId         String
  articleByBranch   ArticlesByBranch @relation(fields: [articleByBranchId], references: [id])
  articleByBranchId String
  quantity          Int

  @@unique(fields: [commandId, articleByBranchId], name: "commandArticle")
}

model Employee {
  id         String  @id @default(uuid())
  fullNameAr String
  fullNameEn String
  email      String  @unique
  address    String
  tel        String
  password   String
  isAdmin    Boolean @default(false)
  branch     Branch? @relation(fields: [branchId], references: [id])
  branchId   String? @map("branch_id")
  role       Role?   @relation(fields: [roleId], references: [id])
  roleId     String?
}

model Role {
  id          String     @id @default(uuid())
  roleNameAr  String
  roleNameEn  String
  permissions Json
  employee    Employee[]
}

model Branch {
  id               String             @id @default(uuid())
  name             String
  identifier       String             @unique
  address          String
  mainBranch       Boolean            @default(false)
  articlesByBranch ArticlesByBranch[]
  commands         Command[]
  employee         Employee[]
}

model Command {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  client         User?         @relation(name: "clientCommand", fields: [clientId], references: [id], onDelete: Cascade)
  clientId       String?       @map("client_id")
  clientName     String        @map("client_name")
  clientAddress  String        @map("client_address")
  clientTel      String        @map("client_tel")
  clientEmail    String        @map("client_email")
  confirm        Boolean       @default(false)
  delivered      Boolean       @default(false)
  paid           Boolean       @default(false)
  hasDelivery    Boolean       @default(false) @map("has_delivery")
  branch         Branch        @relation(fields: [branchId], references: [id])
  branchId       String        @map("branch_id")
  intermediate   User?         @relation(name: "intermediate", fields: [intermediateId], references: [id], onDelete: Cascade)
  intermediateId String?       @map("intermediate_id")
  country        Country?      @relation(fields: [countryId], references: [id])
  countryId      String?
  city           City?         @relation(fields: [cityId], references: [id])
  cityId         String?
  commandLine    CommandLine[]
}

model Country {
  id      String    @id @default(uuid())
  nameAr  String
  nameEn  String
  City    City[]
  Command Command[]
  User    User[]
}

model City {
  id        String    @id @default(uuid())
  nameAr    String
  nameEn    String
  country   Country   @relation(fields: [countryId], references: [id])
  countryId String
  Command   Command[]
  User      User[]
}

model Supply {
  providerId String
  provider   Provider @relation(fields: [providerId], references: [id])
  articleId  String
  article    Article  @relation(fields: [articleId], references: [id])
  dateTime   DateTime

  @@unique(fields: [articleId, providerId, dateTime], name: "supplyByTime")
}

model Provider {
  id             String   @id @default(uuid())
  name           String
  address        String
  tel            String
  accountBalance Float
  logo           String
  email          String   @unique
  Supply         Supply[]
}

//media
model Media {
  id           String         @id @default(uuid())
  path         String
  type         String
  alt          String?
  extension    String
  description  String?
  MediaUser    MediaUser[]
  MediaArticle MediaArticle[]
  User         User[]
  Article      Article[]
  MediaBlog    MediaBlog[]
}

model MediaUser {
  media   Media  @relation(fields: [mediaId], references: [id])
  mediaId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@unique(fields: [mediaId, userId], name: "userMedia")
}

model MediaArticle {
  media     Media   @relation(fields: [mediaId], references: [id])
  mediaId   String
  article   Article @relation(fields: [articleId], references: [id])
  articleId String

  @@unique(fields: [mediaId, articleId], name: "articleMedia")
}

// blog
model MediaBlog {

  blog    Blog   @relation(fields: [blogId], references: [id],onDelete: Cascade)
  blogId  String
  media   Media  @relation(fields: [mediaId], references: [id])
  mediaId String

  @@unique(fields: [blogId, mediaId], name: "blogMedia")
}


model Blog {
  id         String       @id @default(uuid())
  content    String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  user       User         @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId     String
  confirm    Boolean      @default(false)
  category   ArticleCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  MediaBlog  MediaBlog[]
  BlogLike   BlogLike[]
  commentBlog  CommentBlog[]
  bookmark Bookmark[]
  view  View[]
 
}


model BlogLike {
  id     String @id @default(uuid())
  userId  String
  user    User   @relation(fields: [userId], references: [id],onDelete: Cascade)
  blogId  String
  blog    Blog   @relation(fields: [blogId], references: [id],onDelete: Cascade)
  likeCategoryId   String
  likeCategory    LikeCategory    @relation(fields: [likeCategoryId], references: [id],onDelete: Cascade)
  

  @@unique(fields: [userId, blogId ,likeCategoryId ], name: "blogLike")
}
model LikeCategory {
  id           String      @id @default(uuid())
  type         String
  blogLike    BlogLike[]
}

// model BlogCategory {
//   id     String @id @default(uuid())
//   nameAr String
//   nameEn String
//   Blog   Blog[]
// }

model CommentBlog {
  id          String                @id @default(uuid())
  content     String
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  blog        Blog                  @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId      String
  replies     ReplyCommentBlog[]
}


model ReplyCommentBlog {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId    String
  commentBlog   CommentBlog  @relation(fields: [commentBlogId], references: [id],onDelete: Cascade)
  commentBlogId String
}

model Bookmark {
  id      String   @id @default(uuid())
  blog    Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId  String
  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique(fields: [blogId, userId])
}


model View {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  blog      Blog     @relation(fields: [blogId], references: [id],onDelete: Cascade)
  blogId    String
}




//workSdpace
model WorkSpace {
  id          String   @id @default(uuid())
  name        String
  image       String
  description String
  capacity    Int
  amenities   String
  price       Float
  rating      Float
  reviews     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  service     Service  @relation(fields: [serviceId], references: [id])
  serviceId   String
}

model Service {
  id        String      @id @default(uuid())
  name      String
  workSpace WorkSpace[]
  tarif     Tarif[]
}
             
model Booking {
  id        String   @id @default(uuid())
  date      DateTime
  startTime String
  endTime   String
  status    Status   @default(pending)
  paid      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  tarif     Tarif    @relation(fields: [tarifId], references: [id])
  tarifId   String

  @@unique([userId, tarifId])
}

model Tarif {
  id          String    @id @default(uuid())
  duration    String?
  price       Float
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]
  service     Service   @relation(fields: [serviceId], references: [id])
  serviceId   String
}

enum Status {
  confirmed
  pending
  refused
}
