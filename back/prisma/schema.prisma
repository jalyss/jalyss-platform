// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount", "orderByRelation"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Branch {
  id               String             @id @default(uuid())
  name             String
  identifier       String             @unique
  address          String
  mainBranch       Boolean            @default(false)
  articlesByBranch ArticlesByBranch[]
  commands         Command[]
  employee         Employee[]

  TransactionReceiver Transaction[] @relation("receiver")
  TransactionSender   Transaction[] @relation("sender")
}

model Country {
  id      String    @id @default(uuid())
  nameAr  String
  nameEn  String
  City    City[]
  Command Command[]

  Client Client[]
}

model City {
  id        String    @id @default(uuid())
  nameAr    String
  nameEn    String
  country   Country   @relation(fields: [countryId], references: [id])
  countryId String
  Command   Command[]

  Client Client[]
}

model EducationLevel {
  id        String   @id @default(uuid())
  nameAr    String
  nameEn    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Client Client[]
}

model JobTitleByFunctioanArea {
  functionalArea   FunctionalArea @relation(fields: [functionalAreaId], references: [id])
  functionalAreaId String
  jobtitle         JobTitle       @relation(fields: [jobTitleId], references: [id])
  jobTitleId       String

  @@unique(fields: [functionalAreaId, jobTitleId], name: "jobTitleByFunctioanArea")
}

model FunctionalArea {
  id                      String                    @id @default(uuid())
  nameAr                  String
  nameEn                  String
  JobTitleByFunctioanArea JobTitleByFunctioanArea[]
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt

  Client Client[]
}

model JobTitle {
  id                      String                    @id @default(uuid())
  nameAr                  String
  nameEn                  String
  JobTitleByFunctioanArea JobTitleByFunctioanArea[]
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt

  Client Client[]
}

model Client {
  id                   String          @id @default(uuid())
  fullNameEn           String
  fullNameAr           String
  email                String          @unique
  address              String
  tel                  String
  avatar               Media?          @relation(fields: [avatarId], references: [id])
  avatarId             String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  accountBalance       Float?
  category             UserCategory?   @relation(fields: [categoryId], references: [id])
  categoryId           String?
  educationLevel       EducationLevel? @relation(fields: [educationLevelId], references: [id])
  educationLevelId     String?
  functionalArea       FunctionalArea? @relation(fields: [functionalAreaId], references: [id])
  functionalAreaId     String?
  jobTitle             JobTitle?       @relation(fields: [jobTitleId], references: [id])
  jobTitleId           String?
  country              Country?        @relation(fields: [countryId], references: [id])
  countryId            String?
  city                 City?           @relation(fields: [cityId], references: [id])
  cityId               String?
  isCoach              Boolean?        @default(false)
  IntermediateCommands Command[]       @relation("intermediate")
  clientCommands       Command[]       @relation("clientCommand")
  User                 User[]
  payments             ClientPayment[]
}

model Employee {
  id         String   @id @default(uuid())
  fullNameAr String
  fullNameEn String
  email      String   @unique
  address    String
  tel        String
  avatarId   String?
  avatar     Media?   @relation(fields: [avatarId], references: [id])
  isAdmin    Boolean  @default(false)
  branch     Branch?  @relation(fields: [branchId], references: [id])
  branchId   String?  @map("branch_id")
  role       Role?    @relation(fields: [roleId], references: [id])
  roleId     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  User       User[]
}

model Role {
  id          String     @id @default(uuid())
  nameAr      String
  nameEn      String
  permissions Json
  employee    Employee[]
}

model User {
  id                   String             @id @default(uuid())
  fullNameEn           String
  fullNameAr           String
  isClient             Boolean            @default(true)
  employeeId           String?
  employee             Employee?          @relation(fields: [employeeId], references: [id])
  clientId             String?
  client               Client?            @relation(fields: [clientId], references: [id])
  email                String             @unique
  password             String
  avatar               Media?             @relation(fields: [avatarId], references: [id])
  avatarId             String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  confirmkey           String?
  isActive             Boolean            @default(true)
  isCoach              Boolean?           @default(false)
  Media                MediaUser[]
  Rating               Rating[]
  Blog                 Blog[]
  BlogLike             BlogLike[]
  chatRooms            UserChatRoom[] // *many to many relationships user&chatRoom
  ChatMessage          ChatMessage[]
  bookings             Booking[] // One-to-Many relation to Booking
  coaching             Coaching[]
  sessionRequests      SessionRequest[]
  trainingBooks        TrainingBooking[] // *One-to-Many relation to TrainingBooking
  // *One-to-Many relation to UserPayment
  commentBlog          CommentBlog[]
  replyCommentaireBlog ReplyCommentBlog[]
  bookMark             Bookmark[]
  ConnectedUser        ConnectedUser?
  SessionFeedBack      SessionFeedback[]
}

model UserCategory {
  id        String   @id @default(uuid())
  nameAr    String
  nameEn    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Client Client[]
}

model ChatRoom {
  id           String         @id @default(uuid())
  name         String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  isGroup      Boolean        @default(false)
  messages     ChatMessage[]
  participants UserChatRoom[]
}

model ChatMessage {
  id         String   @id @default(uuid())
  text       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId String
  seen       Boolean  @default(false)
}

model ConnectedUser {
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId])
}

//join table between user and chat room 

model UserChatRoom {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId String

  @@unique(fields: [userId, chatRoomId], name: "joinerRoom")
}

model ArticleCategory {
  id                String              @id @default(uuid())
  nameAr            String
  nameEn            String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  articles          Article[]
  Blog              Blog[]
  Session           Session[]
  RequestCategories RequestCategories[]
}

model Type {
  id        String    @id @default(uuid())
  nameAr    String
  nameEn    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]
}

model PublishingHouse {
  id                   String                 @id @default(uuid())
  name                 String
  address              String
  logoId               String?
  logo                 Media?                 @relation(fields: [logoId], references: [id])
  updatedAt            DateTime               @updatedAt
  articles             Article[]
  MediaPublishingHouse MediaPublishingHouse[]
}

model Author {
  id              String            @id @default(uuid())
  nameAr          String
  nameEn          String
  biographyAr     String?
  biographyEn     String?
  ArticleByAuthor ArticleByAuthor[]
}

model ArticleByAuthor {
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
  author    Author  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String

  @@unique([authorId, articleId])
}

model Provider {
  id             String          @id @default(uuid())
  name           String
  address        String
  tel            String
  accountBalance Float
  logoId         String?
  logo           Media?          @relation(fields: [logoId], references: [id])
  email          String          @unique
  Supply         Supply[]
  MediaProvider  MediaProvider[]
}

model Supply {
  providerId String
  provider   Provider @relation(fields: [providerId], references: [id])
  articleId  String
  article    Article  @relation(fields: [articleId], references: [id])
  dateTime   DateTime

  @@unique(fields: [articleId, providerId, dateTime], name: "supplyByTime")
}

model Article {
  id                 String             @id @default(uuid())
  title              String
  cover              Media?             @relation(fields: [coverId], references: [id])
  coverId            String?
  weight             Float
  pageNumber         Int
  code               String             @unique
  shortDescriptionEn String?            @map("short_desc_en")
  longDescriptionEn  String?            @map("long_desc_en")
  shortDescriptionAr String?            @map("short_desc_ar")
  longDescriptionAr  String?            @map("long_desc_ar")
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  category           ArticleCategory    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId         String
  publishingHouse    PublishingHouse    @relation(fields: [publishingHouseId], references: [id], onDelete: Cascade)
  publishingHouseId  String
  type               Type               @relation(fields: [typeId], references: [id])
  typeId             String
  ArticlesByBranch   ArticlesByBranch[]
  Supply             Supply[]
  media              MediaArticle[]
  ArticleByAuthor    ArticleByAuthor[]
  MvtArticle         MvtArticle[]
}

model ArticlesByBranch {
  id          String        @id @default(uuid())
  branch      Branch        @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId    String
  articleId   String
  article     Article       @relation(fields: [articleId], references: [id], onDelete: Cascade)
  price       Float
  stock       Int
  rating      Rating[]
  CommandLine CommandLine[]

  @@unique([branchId, articleId])
}

model MvtArticle {
  articleId     String
  article       Article     @relation(fields: [articleId], references: [id])
  quantity      Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  @@unique(fields: [articleId, transactionId], name: "mvtArticle")
}

model Transaction {
  id               String       @id @default(uuid())
  branchSender     Branch       @relation(name: "sender", fields: [branchSenderId], references: [id])
  branchSenderId   String
  branchReceiver   Branch       @relation(name: "receiver", fields: [branchReceiverId], references: [id])
  branchReceiverId String
  status           StatusMvt    @default(pending)
  reason           String?
  date             DateTime
  mvtArticle       MvtArticle[]
  @@unique(fields: [branchReceiverId, branchSenderId, date], name: "transaction")
}



model Rating {
  articleByBranch   ArticlesByBranch @relation(fields: [articleByBranchId], references: [id])
  articleByBranchId String
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  rate              Int
  commit            String

  @@unique(fields: [articleByBranchId, userId], name: "articleUser")
}

model Command {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  client         Client?       @relation(name: "clientCommand", fields: [clientId], references: [id], onDelete: Cascade)
  clientId       String?       @map("client_id")
  clientName     String        @map("client_name")
  clientAddress  String        @map("client_address")
  clientTel      String        @map("client_tel")
  clientEmail    String        @map("client_email")
  confirm        Boolean       @default(false)
  delivered      Boolean       @default(false)
  paid           Boolean       @default(false)
  hasDelivery    Boolean       @default(false) @map("has_delivery")
  branch         Branch        @relation(fields: [branchId], references: [id])
  branchId       String        @map("branch_id")
  intermediate   Client?       @relation(name: "intermediate", fields: [intermediateId], references: [id], onDelete: Cascade)
  intermediateId String?       @map("intermediate_id")
  country        Country?      @relation(fields: [countryId], references: [id])
  countryId      String?
  city           City?         @relation(fields: [cityId], references: [id])
  cityId         String?
  commandLine    CommandLine[]
}

model CommandLine {
  command           Command          @relation(fields: [commandId], references: [id])
  commandId         String
  articleByBranch   ArticlesByBranch @relation(fields: [articleByBranchId], references: [id])
  articleByBranchId String
  quantity          Int

  @@unique(fields: [commandId, articleByBranchId], name: "commandArticle")
}

//TRAINING
model SessionRequest {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt         DateTime            @default(now())
  resume            Media               @relation(fields: [resumeId], references: [id])
  resumeId          String
  status            StatusBlog          @default(pending)
  RequestCategories RequestCategories[]
}

model RequestCategories {
  sessionRequest   SessionRequest  @relation(fields: [sessionRequestId], references: [id], onDelete: Cascade)
  sessionRequestId String
  category         ArticleCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId       String

  @@unique(fields: [categoryId, sessionRequestId], name: "RequestCategory")
}

model MediaSession {
  media     Media   @relation(fields: [mediaId], references: [id])
  mediaId   String
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String

  @@unique(fields: [mediaId, sessionId], name: "sessionMedia")
}

model Session {
  id                         String                       @id @default(uuid())
  titleEn                    String
  titleAr                    String
  descriptionEn              String?
  descriptionAr              String?
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  startDate                  DateTime
  endDate                    DateTime
  category                   ArticleCategory              @relation(fields: [categoryId], references: [id])
  categoryId                 String
  previousSesion             Session?                     @relation(name: "prevSession", fields: [previousSessionId], references: [id])
  previousSessionId          String?
  prevSession                Session[]                    @relation("prevSession")
  nextSesion                 Session?                     @relation(name: "nextSession", fields: [nextSessionId], references: [id])
  nextSessionId              String?
  nextSession                Session[]                    @relation("nextSession")
  sessionType                SessionHasSessionType[] // *many to many relation sessionType
  lectures                   SessionHasLecture[] // *many to many relation lecture 
  tarifs                     SessionTarif[] // * one to many relation to Session Tarif
  MediaSession               MediaSession[]
  cover                      Media?                       @relation(fields: [coverId], references: [id])
  coverId                    String?
  sessionFeedback            SessionFeedback[]
  sessionHasPrerequire       sessionHasPrerequire[]
  SessionHasWhatYouWillLearn SessionHasWhatYouWillLearn[]
  SessionHasFeatures         SessionHasFeatures[]
}

model SessionFeedback {
  id        String   @id @default(uuid())
  content   String
  Session   Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String?

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model frequentilyQuestion {
  id       String @id @default(uuid())
  question String
  answer   String
}

model WhatYouWillLearn {
  id                         String                       @id @default(uuid())
  contentEn                  String
  contentAr                  String
  createdAt                  DateTime                     @default(now())
  SessionHasWhatYouWillLearn SessionHasWhatYouWillLearn[]
  LectureHasWhatYouWillLearn LectureHasWhatYouWillLearn[]
}

model SessionHasWhatYouWillLearn {
  session            Session          @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId          String
  WhatYouWillLearn   WhatYouWillLearn @relation(fields: [WhatYouWillLearnId], references: [id], onDelete: Cascade)
  WhatYouWillLearnId String

  @@unique(fields: [sessionId, WhatYouWillLearnId], name: "joinerr")
}

model LectureHasWhatYouWillLearn {
  lecture            Lecture          @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  lectureId          String
  WhatYouWillLearn   WhatYouWillLearn @relation(fields: [WhatYouWillLearnId], references: [id], onDelete: Cascade)
  WhatYouWillLearnId String

  @@unique(fields: [lectureId, WhatYouWillLearnId], name: "joinerrr")
}

model Prerequire {
  id        String @id @default(uuid())
  contentEn String
  contentAr String

  createdAt DateTime @default(now())

  sessionHasPrerequire sessionHasPrerequire[]
}

model sessionHasPrerequire {
  session      Session    @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId    String
  prerequire   Prerequire @relation(fields: [prerequireId], references: [id], onDelete: Cascade)
  prerequireId String

  @@unique(fields: [sessionId, prerequireId], name: "joiner")
}

//!join table between Session and SessionType
model SessionHasSessionType {
  session       Session     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId     String
  sessiontype   SessionType @relation(fields: [sessionTypeId], references: [id], onDelete: Cascade)
  sessionTypeId String

  @@unique(fields: [sessionId, sessionTypeId], name: "joiner")
}

model SessionType {
  id      String @id @default(uuid())
  titleEn String
  titleAr String

  createdAt DateTime                @default(now())
  sessions  SessionHasSessionType[] //*many to many relation to Session
}

//!join table between Session and Lecture
model SessionHasLecture {
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String
  lectures  Lecture  @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  lectureId String
  startAt   DateTime
  endAt     DateTime

  @@unique(fields: [sessionId, lectureId], name: "joiner_Session_Lecture")
}

model Lecture {
  id                         String                       @id @default(uuid())
  titleEn                    String
  titleAr                    String
  contentEn                  String
  contentAr                  String
  createdAt                  DateTime                     @default(now())
  sessions                   SessionHasLecture[]
  assesments                 Assessments[]
  coaching                   Coaching[]
  LectureHasWhatYouWillLearn LectureHasWhatYouWillLearn[]
}

model Coaching {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  lecture   Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  lectureId String
}

model Assessments {
  id        String  @id @default(uuid())
  title     String
  content   String
  lecture   Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  lectureId String
}

model Feature {
  id                      String                    @id @default(uuid())
  labelEn                 String
  labelAr                 String
  createdAt               DateTime                  @default(now())
  SessionTarifHasFeatures SessionTarifHasFeatures[]
  SessionHasFeatures      SessionHasFeatures[]
}

model SessionTarifHasFeatures {
  feature      Feature      @relation(fields: [featureId], references: [id], onDelete: Cascade)
  featureId    String
  sessionTarif SessionTarif @relation(fields: [tarifId], references: [id], onDelete: Cascade)
  tarifId      String
  isAvailable  Boolean

  @@unique(fields: [featureId, tarifId], name: "sessionTarifHasFeatures")
}

model SessionHasFeatures {
  feature   Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)
  featureId String
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String

  @@unique(fields: [featureId, sessionId], name: "sessionHasFeatures")
}

model SessionTarif {
  id        String                    @id @default(uuid())
  titleEn   String
  titleAr   String
  price     Float
  createdAt DateTime                  @default(now())
  bookings  TrainingBooking[] // *one to many relation to TrainingBooking
  session   Session                   @relation(fields: [sessionId], references: [id])
  sessionId String
  features  SessionTarifHasFeatures[]
}

model TrainingBooking {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  sessiontarif   SessionTarif @relation(fields: [sessionTarifId], references: [id], onDelete: Cascade)
  sessionTarifId String
  paid           Boolean?     @default(false)

  @@unique(fields: [userId, sessionTarifId], name: "trainingBooking")
}

model ClientPayment {
  id        String   @id @default(uuid())
  client    Client   @relation(fields: [clientId], references: [id])
  clientId  String
  amount    Float
  createdAt DateTime @default(now())
}

//media
model Media {
  id            String          @id @default(uuid())
  path          String
  type          String
  alt           String?
  extension     String?
  description   String?
  MediaUser     MediaUser[]
  MediaArticle  MediaArticle[]
  User          User[]
  Article       Article[]
  MediaBlog     MediaBlog[]
  Employee      Employee[]
  Blog          Blog[]
  WorkSpace     WorkSpace[]
  Provider      Provider[]
  MediaProvider MediaProvider[]

  MediaWorkSpace MediaWorkSpace[]

  MediaService   MediaService[]
  Service        Service[]
  MediaSession   MediaSession[]
  Session        Session[]
  SessionRequest SessionRequest[]

  PublishingHouse      PublishingHouse[]
  MediaPublishingHouse MediaPublishingHouse[]
  Client               Client[]
}

model MediaProvider {
  media      Media    @relation(fields: [mediaId], references: [id])
  mediaId    String
  provider   Provider @relation(fields: [providerId], references: [id])
  providerId String

  @@unique(fields: [mediaId, providerId], name: "providerMedia")
}

model MediaPublishingHouse {
  media             Media           @relation(fields: [mediaId], references: [id])
  mediaId           String
  publishingHouse   PublishingHouse @relation(fields: [publishingHouseId], references: [id], onDelete: Cascade)
  publishingHouseId String

  @@unique(fields: [mediaId, publishingHouseId], name: "PublishingHouseMedia")
}

model MediaUser {
  media   Media  @relation(fields: [mediaId], references: [id])
  mediaId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@unique(fields: [mediaId, userId], name: "userMedia")
}

model MediaArticle {
  media     Media   @relation(fields: [mediaId], references: [id])
  mediaId   String
  article   Article @relation(fields: [articleId], references: [id])
  articleId String

  @@unique(fields: [mediaId, articleId], name: "articleMedia")
}

model MediaBlog {
  blog    Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId  String
  media   Media  @relation(fields: [mediaId], references: [id])
  mediaId String

  @@unique(fields: [blogId, mediaId], name: "blogMedia")
}

model MediaService {
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])
  mediaId   String
  media     Media   @relation(fields: [mediaId], references: [id])

  @@unique([mediaId, serviceId])
}

model MediaWorkSpace {
  workspaceId String
  workspace   WorkSpace @relation(fields: [workspaceId], references: [id])
  mediaId     String
  media       Media     @relation(fields: [mediaId], references: [id])

  @@unique([mediaId, workspaceId])
}

// blog

model Blog {
  id          String           @id @default(uuid())
  content     String
  cover       Media?           @relation(fields: [coverId], references: [id], onDelete: Cascade)
  coverId     String?
  title       String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  author      User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  confirm     StatusBlog       @default(pending)
  reason      String?
  category    ArticleCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  MediaBlog   MediaBlog[]
  BlogLike    BlogLike[]
  commentBlog CommentBlog[]
  bookmark    Bookmark[]
  view        View[]
}

model BlogLike {
  id             String       @id @default(uuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  blogId         String
  blog           Blog         @relation(fields: [blogId], references: [id], onDelete: Cascade)
  likeCategoryId String
  likeCategory   LikeCategory @relation(fields: [likeCategoryId], references: [id], onDelete: Cascade)

  @@unique(fields: [userId, blogId, likeCategoryId], name: "blogLike")
}

model LikeCategory {
  id       String     @id @default(uuid())
  type     String
  blogLike BlogLike[]
}

model CommentBlog {
  id        String             @id @default(uuid())
  content   String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  blog      Blog               @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String
  replies   ReplyCommentBlog[]
}

model ReplyCommentBlog {
  id            String      @id @default(uuid())
  content       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  commentBlog   CommentBlog @relation(fields: [commentBlogId], references: [id], onDelete: Cascade)
  commentBlogId String
}

model Bookmark {
  id     String @id @default(uuid())
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique(fields: [blogId, userId])
}

model View {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String
}

//JalyssSpace

// model Service {
//   id           String         @id @default(uuid())
//   name         String
//   identifier   String?        @unique()

// }

model Service {
  id          String  @id @default(uuid())
  name        String
  description String?
  identifier  String? @unique()
  perHour     Boolean @default(true)
  coverId     String?

  cover        Media?         @relation(fields: [coverId], references: [id])
  workSpace    WorkSpace[]
  tarif        Tarif[]
  MediaService MediaService[]
}

model WorkSpace {
  id             String           @id @default(uuid())
  name           String
  capacity       String?
  description    String?
  price          String?
  rating         String?
  reviews        String?
  amenities      String?
  imageId        String?
  image          Media?           @relation(fields: [imageId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  serviceId      String?
  service        Service?         @relation(fields: [serviceId], references: [id])
  MediaWorkSpace MediaWorkSpace[]
}

model Tarif {
  id          String    @id @default(uuid())
  name        String?
  duration    String?
  capacity    String?
  price       Float
  pricePerDay Float?
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]
  service     Service   @relation(fields: [serviceId], references: [id])
  serviceId   String
}

model Booking {
  id          String   @id @default(uuid())
  date        DateTime
  startTime   String
  endTime     String
  email       String?
  firstName   String?
  lastName    String?
  phoneNumber String?
  status      Status   @default(pending)
  paid        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
  tarif       Tarif    @relation(fields: [tarifId], references: [id])
  tarifId     String
  companyName String?
  freeSpace   String?

  @@unique([userId, tarifId])
}

//website Settings
model MainComponent {
  id           String         @id
  SubComponent SubComponent[]
}

model SubComponent {
  id                  String                @id
  mainComponentId     String
  mainComponent       MainComponent         @relation(fields: [mainComponentId], references: [id])
  ContentSubComponent ContentSubComponent[]
}

model ContentSubComponent {
  id             String       @id
  subComponentId String
  subComponent   SubComponent @relation(fields: [subComponentId], references: [id])
}

enum Status {
  confirmed
  pending
  refused
}

enum StatusBlog {
  confirmed
  pending
  refused
}

enum StatusMvt {
  pending
  in_progress
  on_hold
  delivered
}
